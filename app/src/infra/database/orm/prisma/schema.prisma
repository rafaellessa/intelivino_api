generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id               Int        @id @default(autoincrement())
  uuid             String     @unique
  cpfCnpj          String     @unique
  logo             String?
  phone            String?
  phonePrincipal   String?
  name             String
  personType       PersonType
  website          String?
  whatsapp         String?
  socialReason     String?
  facebookUrl      String?
  instagramUrl     String?
  bannerUrlCatalog String?
  createdAt        DateTime   @default(now()) @db.Timestamp(3)
  updatedAt        DateTime   @updatedAt @db.Timestamp(3)

  @@map("accounts")
}

model User {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique
  name                  String
  email                 String
  password              String
  birthdate             DateTime
  street                String
  additionalInformation String?
  number                String
  district              String
  city                  String
  state                 String
  zipCode               String
  socialNetworks        SocialNetwork[]
  userOnSocialNetwork   UserOnSocialNetwork[]
  photo                 String?
  nameBusiness          String?
  nameBusinessSlug      String?
  createdAt             DateTime              @default(now()) @db.Timestamp(3)
  updatedAt             DateTime              @updatedAt @db.Timestamp(3)
  customer              Customer?

  @@map("users")
}

model Customer {
  id                    Int     @id @default(autoincrement())
  name                  String
  cpfCnpj               String  @unique
  uuid                  String  @unique
  email                 String  @unique
  phone                 String?
  street                String
  additionalInformation String?
  number                String
  district              String
  city                  String
  state                 String
  zipCode               String
  userId                Int     @unique
  user                  User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserOnSocialNetwork {
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialNetworkId Int
  socialNetwork   SocialNetwork @relation(fields: [socialNetworkId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt       DateTime      @default(now()) @db.Timestamp(3)
  updatedAt       DateTime      @updatedAt @db.Timestamp(3)

  @@id([userId, socialNetworkId])
  @@map("user_social_networks")
}

model SocialNetwork {
  id                  Int                   @id @default(autoincrement())
  name                String
  logo                String?
  user                User[]
  userOnSocialNetwork UserOnSocialNetwork[]
  createdAt           DateTime              @default(now()) @db.Timestamp(3)
  updatedAt           DateTime              @updatedAt @db.Timestamp(3)
  uuid                String                @unique

  @@map("social_networks")
}

enum PersonType {
  F
  J
}
