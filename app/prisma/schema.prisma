// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id            Int        @id @default(autoincrement())
  name          String
  cpf_cnpj      String     @unique
  phone         String?
  whatsapp      String?
  logo          String?
  person_type   PersonType
  site          String?
  social_reason String?
  facebook_url  String?
  instagram_url String?
  banner        String?
  gender        GenderType
  campaign      Campaign[]
  created_at    DateTime   @default(now()) @db.Timestamp(3)
  updated_at    DateTime   @updatedAt @db.Timestamp(3)
  uuid          String     @unique
  order         Order[]

  @@map("account")
}

model AccountUser {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  password               String
  street                 String
  number                 String
  district               String
  country                String
  state                  String
  additional_information String?
  zipcode                String
  photo                  String?
  gender                 GenderType @default(ND)
  birthdate              String
  created_at             DateTime   @default(now()) @db.Timestamp(3)
  updated_at             DateTime   @updatedAt @db.Timestamp(3)
  lastLogin              DateTime   @default(now()) @db.Timestamp(3)
  uuid                   String     @unique

  @@map("account_user")
}

enum PersonType {
  F
  J
}

enum GenderType {
  F
  M
  ND
}

model Campaign {
  id                  Int          @id @default(autoincrement())
  name                String
  description         String
  percentage_discount Float?
  start_date          DateTime
  expiration_date     DateTime
  type_id             Int
  campaign_type       CampaignType @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account             Account      @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account_id          Int
  created_at          DateTime     @default(now()) @db.Timestamp(3)
  updated_at          DateTime     @updatedAt @db.Timestamp(3)
  uuid                String       @unique

  @@map("campaign")
}

model CampaignType {
  id       Int        @id @default(autoincrement())
  Campaign Campaign[]

  @@map("campaign_type")
}

model Coupon {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  percentage      Float
  expiration_date DateTime
  created_at      DateTime @default(now()) @db.Timestamp(3)
  updated_at      DateTime @updatedAt @db.Timestamp(3)
  uuid            String   @unique

  @@map("coupon")
}

model Label {
  id                 Int          @id @default(autoincrement())
  name               String
  description        String
  type_id            Int
  labelType          LabelType    @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country_id         Int
  country            Country      @relation(fields: [country_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  region_id          Int
  region             Region       @relation(fields: [region_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  harvest            String?
  wine_type_id       Int
  wine_type          WineType     @relation(fields: [wine_type_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  alcohol_percentage Decimal
  price              Float
  promotional_price  Float?
  is_active          Boolean      @default(true)
  stock              Boolean      @default(true)
  created_at         DateTime     @default(now()) @db.Timestamp(3)
  updated_at         DateTime     @updatedAt @db.Timestamp(3)
  uuid               String       @unique
  label_grape        LabelGrape[]
  order_label        OrderLabel[]

  @@map("label")
}

model LabelGrape {
  label_id   Int
  label      Label    @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grape_id   Int
  grape      Grape    @relation(fields: [grape_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@id([label_id, grape_id])
  @@map("label_grape")
}

model Grape {
  id         Int          @id @default(autoincrement())
  name       String
  LabelGrape LabelGrape[]
  created_at DateTime     @default(now()) @db.Timestamp(3)
  updatedAt  DateTime     @updatedAt @db.Timestamp(3)
  uuid       String       @unique

  @@map("grape")
}

model LabelType {
  id         Int      @id @default(autoincrement())
  name       String
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("label_type")
}

model Country {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  states     State[]
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("country")
}

model State {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  country_id Int
  country    Country  @relation(fields: [country_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  regions    Region[]
  cities     City[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("state")
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  state_id   Int
  state      State    @relation(fields: [state_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("city")
}

model Region {
  id         Int         @id @default(autoincrement())
  state_id   Int
  state      State       @relation(fields: [state_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name       String
  slug       String
  subregion  SubRegion[]
  labels     Label[]
  created_at DateTime    @default(now()) @db.Timestamp(3)
  updated_at DateTime    @updatedAt @db.Timestamp(3)
  uuid       String      @unique

  @@map("region")
}

model SubRegion {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  slug       String   @unique
  region_id  Int
  region     Region   @relation(fields: [region_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("sub_region")
}

model WineType {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("wine_type")
}

model Order {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  account_id  Int
  people_id   Int
  people      People       @relation(fields: [people_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account     Account      @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  total       Float
  coupon_id   Int?
  created_at  DateTime     @default(now()) @db.Timestamp(3)
  updated_at  DateTime     @updatedAt @db.Timestamp(3)
  uuid        String       @unique
  order_label OrderLabel[]
  invoice     Invoice[]
}

model People {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  phone                  String
  whatsapp               String
  cpf_cnpj               String     @unique
  street                 String
  number                 String
  district               String
  country                String
  state                  String
  additional_information String?
  zipcode                String
  photo                  String?
  gender                 GenderType @default(ND)
  birthdate              String
  created_at             DateTime   @default(now()) @db.Timestamp(3)
  updated_at             DateTime   @updatedAt @db.Timestamp(3)
  lastLogin              DateTime   @default(now()) @db.Timestamp(3)
  uuid                   String     @unique
  order                  Order[]
  invoice                Invoice[]

  @@map("people")
}

model OrderLabel {
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label_id   Int
  label      Label    @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique
  quantity   Int

  @@id([order_id, label_id])
  @@map("order_label")
}

model Invoice {
  id         Int      @id @default(autoincrement())
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  people_id  Int
  people     People   @relation(fields: [people_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique

  @@map("invoice")
}
