// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  output        = "./client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int                 @id @default(autoincrement())
  name               String
  cpf_cnpj           String              @unique
  phone              String?
  whatsapp           String?
  logo               String?
  person_type        PersonType
  site               String?
  social_reason      String?
  facebook_url       String?
  instagram_url      String?
  banner             String?
  gender             GenderType
  campaign           Campaign[]
  plan_id            Int
  plan               Plan                @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscription       Subscription[]
  created_at         DateTime            @default(now()) @db.Timestamp(3)
  updated_at         DateTime            @updatedAt @db.Timestamp(3)
  uuid               String              @unique @default(uuid())
  order              Order[]
  account_activities AccountActivities[]

  @@map("account")
}

model AccountActivities {
  account_id   Int
  account      Account    @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activitie_id Int
  activitie    Activities @relation(fields: [activitie_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at   DateTime   @default(now()) @db.Timestamp(3)
  updated_at   DateTime   @updatedAt @db.Timestamp(3)
  uuid         String     @unique @default(uuid())

  @@id([account_id, activitie_id])
  @@map("account_activities")
}

model Activities {
  id                 Int                 @id @default(autoincrement())
  name               String
  slug               String
  created_at         DateTime            @default(now()) @db.Timestamp(3)
  updated_at         DateTime            @updatedAt @db.Timestamp(3)
  uuid               String              @unique @default(uuid())
  account_activities AccountActivities[]

  @@map("activities")
}

model AccountUser {
  id                     Int          @id @default(autoincrement())
  name                   String
  email                  String       @unique
  password               String
  street                 String
  number                 String
  district               String
  country                String
  state                  String
  additional_information String?
  zipcode                String
  photo                  String?
  gender                 GenderType   @default(ND)
  birthdate              String
  created_at             DateTime     @default(now()) @db.Timestamp(3)
  updated_at             DateTime     @updatedAt @db.Timestamp(3)
  lastLogin              DateTime     @default(now()) @db.Timestamp(3)
  uuid                   String       @unique @default(uuid())
  device_user            DeviceUser[]

  @@map("account_user")
}

enum PersonType {
  F
  J
}

enum GenderType {
  F
  M
  ND
}

model Campaign {
  id                  Int             @id @default(autoincrement())
  name                String
  description         String
  percentage_discount Float?
  start_date          DateTime
  expiration_date     DateTime
  type_id             Int
  campaign_type       CampaignType    @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account             Account         @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account_id          Int
  created_at          DateTime        @default(now()) @db.Timestamp(3)
  updated_at          DateTime        @updatedAt @db.Timestamp(3)
  uuid                String          @unique @default(uuid())
  label_campaign      LabelCampaign[]

  @@map("campaign")
}

model CampaignType {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String
  Campaign Campaign[]

  @@map("campaign_type")
}

model Coupon {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  percentage      Float
  expiration_date DateTime
  created_at      DateTime @default(now()) @db.Timestamp(3)
  updated_at      DateTime @updatedAt @db.Timestamp(3)
  uuid            String   @unique @default(uuid())

  @@map("coupon")
}

model Label {
  id                 Int             @id @default(autoincrement())
  name               String
  description        String
  type_id            Int
  labelType          LabelType       @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country_id         Int
  country            Country         @relation(fields: [country_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  region_id          Int
  region             Region          @relation(fields: [region_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  harvest            String?
  wine_type_id       Int
  wine_type          WineType        @relation(fields: [wine_type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  alcohol_percentage Decimal
  price              Float
  promotional_price  Float?
  is_active          Boolean         @default(true)
  stock              Boolean         @default(true)
  created_at         DateTime        @default(now()) @db.Timestamp(3)
  updated_at         DateTime        @updatedAt @db.Timestamp(3)
  uuid               String          @unique @default(uuid())
  label_grape        LabelGrape[]
  order_label        OrderLabel[]
  label_campaign     LabelCampaign[]

  @@map("label")
}

model LabelCampaign {
  label_id    Int
  label       Label    @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaign_id Int
  campaign    Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime @default(now()) @db.Timestamp(3)
  updated_at  DateTime @updatedAt @db.Timestamp(3)
  uuid        String   @unique @default(uuid())

  @@id([label_id, campaign_id])
  @@map("label_campaign")
}

model LabelGrape {
  label_id   Int
  label      Label    @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grape_id   Int
  grape      Grape    @relation(fields: [grape_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@id([label_id, grape_id])
  @@map("label_grape")
}

model Grape {
  id         Int          @id @default(autoincrement())
  name       String
  LabelGrape LabelGrape[]
  created_at DateTime     @default(now()) @db.Timestamp(3)
  updatedAt  DateTime     @updatedAt @db.Timestamp(3)
  uuid       String       @unique @default(uuid())

  @@map("grape")
}

model LabelType {
  id         Int      @id @default(autoincrement())
  name       String
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("label_type")
}

model Country {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  states     State[]
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("country")
}

model State {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  country_id Int
  country    Country  @relation(fields: [country_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  regions    Region[]
  cities     City[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("state")
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  state_id   Int
  state      State    @relation(fields: [state_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("city")
}

model Region {
  id         Int         @id @default(autoincrement())
  state_id   Int
  state      State       @relation(fields: [state_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name       String
  slug       String
  subregion  SubRegion[]
  labels     Label[]
  created_at DateTime    @default(now()) @db.Timestamp(3)
  updated_at DateTime    @updatedAt @db.Timestamp(3)
  uuid       String      @unique @default(uuid())

  @@map("region")
}

model SubRegion {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  slug       String   @unique
  region_id  Int
  region     Region   @relation(fields: [region_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("sub_region")
}

model WineType {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  labels     Label[]
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("wine_type")
}

model Order {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  account_id  Int
  people_id   Int
  people      People       @relation(fields: [people_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account     Account      @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  total       Float
  coupon_id   Int?
  created_at  DateTime     @default(now()) @db.Timestamp(3)
  updated_at  DateTime     @updatedAt @db.Timestamp(3)
  uuid        String       @unique @default(uuid())
  order_label OrderLabel[]
  invoice     Invoice[]

  @@map("order")
}

model People {
  id                     Int            @id @default(autoincrement())
  name                   String
  email                  String         @unique
  phone                  String
  whatsapp               String
  cpf_cnpj               String         @unique
  street                 String
  number                 String
  district               String
  country                String
  state                  String
  additional_information String?
  zipcode                String
  photo                  String?
  gender                 GenderType     @default(ND)
  birthdate              String
  created_at             DateTime       @default(now()) @db.Timestamp(3)
  updated_at             DateTime       @updatedAt @db.Timestamp(3)
  lastLogin              DateTime       @default(now()) @db.Timestamp(3)
  uuid                   String         @unique @default(uuid())
  order                  Order[]
  invoice                Invoice[]
  device_people          DevicePeople[]

  @@map("people")
}

model OrderLabel {
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label_id   Int
  label      Label    @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())
  quantity   Int

  @@id([order_id, label_id])
  @@map("order_label")
}

model Invoice {
  id         Int      @id @default(autoincrement())
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  people_id  Int
  people     People   @relation(fields: [people_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("invoice")
}

model Device {
  id                  Int                  @id @default(autoincrement())
  device_physical_id  String               @unique
  platform            PlatformType
  version             String
  token_notification  String
  created_at          DateTime             @default(now()) @db.Timestamp(3)
  updated_at          DateTime             @updatedAt @db.Timestamp(3)
  uuid                String               @unique @default(uuid())
  device_people       DevicePeople[]
  device_user_account DeviceUser[]
  push_notification   PushNotification[]
  sms_notification    SmsNotification[]
  device_notification DeviceNotification[]

  @@map("device")
}

enum PlatformType {
  android
  ios
}

model DevicePeople {
  device_id  Int
  device     Device   @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  people_id  Int
  people     People   @relation(fields: [people_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@id([device_id, people_id])
  @@map("device_people")
}

model DeviceUser {
  device_id       Int
  device          Device      @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_account_id Int
  user_account    AccountUser @relation(fields: [user_account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime    @default(now()) @db.Timestamp(3)
  updated_at      DateTime    @updatedAt @db.Timestamp(3)
  uuid            String      @unique @default(uuid())

  @@id([device_id, user_account_id])
  @@map("device_user")
}

model Notifications {
  id                  Int                  @id @default(autoincrement())
  title               String
  message             String
  created_at          DateTime             @default(now()) @db.Timestamp(3)
  updated_at          DateTime             @updatedAt @db.Timestamp(3)
  uuid                String               @unique @default(uuid())
  type                TypeNotification
  sms_notification    SmsNotification[]
  email_notification  EmailNotification[]
  push_notification   PushNotification[]
  device_notification DeviceNotification[]

  @@map("notification")
}

model EmailNotification {
  id                Int                   @id @default(autoincrement())
  notification_id   Int
  notification      Notifications         @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  to                String
  from              String
  from_name         String
  cc                String?
  bcc               String?
  type              EmailTypeNotification
  subject           String
  body              String
  url_callback      String
  opened            String?
  clicked           String?
  failed            String?
  error_description String?
  created_at        DateTime              @default(now()) @db.Timestamp(3)
  updated_at        DateTime              @updatedAt @db.Timestamp(3)
  uuid              String                @unique @default(uuid())

  @@map("email_notification")
}

model SmsNotification {
  id              Int           @id @default(autoincrement())
  notification_id Int
  notification    Notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  device_id       Int
  device          Device        @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  to              String
  subject         String
  body            String
  send            String?
  created_at      DateTime      @default(now()) @db.Timestamp(3)
  updated_at      DateTime      @updatedAt @db.Timestamp(3)
  uuid            String        @unique @default(uuid())

  @@map("sms_notification")
}

model PushNotification {
  id              Int           @id @default(autoincrement())
  notification_id Int
  notification    Notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title           String
  subject         String
  send            String?
  device_id       Int
  device          Device        @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime      @default(now()) @db.Timestamp(3)
  updated_at      DateTime      @updatedAt @db.Timestamp(3)
  uuid            String        @unique @default(uuid())

  @@map("push_notification")
}

enum TypeNotification {
  email
  sms
  push
}

enum EmailTypeNotification {
  html
  text
}

model DeviceNotification {
  device_id       Int
  device          Device        @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notification_id Int
  notification    Notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime      @default(now()) @db.Timestamp(3)
  updated_at      DateTime      @updatedAt @db.Timestamp(3)
  uuid            String        @unique @default(uuid())

  @@id([device_id, notification_id])
  @@map("device_notification")
}

model Plan {
  id               Int            @id @default(autoincrement())
  name             String
  description      String
  slug             String
  price            Float
  max_users        Int
  max_labels       Int
  payment_cycle_id Int
  payment_cycle    PaymentCycle   @relation(fields: [payment_cycle_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account          Account[]
  created_at       DateTime       @default(now()) @db.Timestamp(3)
  updated_at       DateTime       @updatedAt @db.Timestamp(3)
  uuid             String         @unique @default(uuid())
  subscription     Subscription[]

  @@map("plan")
}

model PaymentCycle {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())
  plans      Plan[]

  @@map("payment_cycle")
}

model Subscription {
  id         Int      @id @default(autoincrement())
  plan_id    Int
  plan       Plan     @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  account_id Int
  account    Account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  due        DateTime
  price      Float
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @updatedAt @db.Timestamp(3)
  uuid       String   @unique @default(uuid())

  @@map("subscription")
}
